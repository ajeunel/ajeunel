{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ajeunel/ajeunel/blob/main/Foundational_Python_Final_Exam.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Open Data DC**"
      ],
      "metadata": {
        "id": "nDzVtfu1u2Bz"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        " **1. Dataset Selection**\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "8tyghTs1wxJ2"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "1.a.Choose a dataset from the OpenDC Data website https://opendata.dc.gov/explore?collection=Dataset ."
      ],
      "metadata": {
        "id": "At7KEb_kvK5x"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Name of Dataset: Grocery Store Locations"
      ],
      "metadata": {
        "id": "zgrm6TMivFGb"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Link to the Dataset:"
      ],
      "metadata": {
        "id": "X9A3QJtXvonp"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "1.b. Download the dataset and upload to Colab. Load the dataset into a Pandas DataFrame. Provide the code for loading the data."
      ],
      "metadata": {
        "id": "M22CrsLGvSVE"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Oq6VOvzCtjMn",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 65
        },
        "outputId": "382b193e-d8ee-4808-dc30-b0edd26096b2"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-29217e64-7703-4f91-9a9e-6bc6aee52e98\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-29217e64-7703-4f91-9a9e-6bc6aee52e98\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving Grocery_Store_Locations-2.csv to Grocery_Store_Locations-2.csv\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "from google.colab import files\n",
        "grocery_data = files.upload()\n",
        "file_name = next(iter(grocery_data))\n",
        "df = pd.read_csv('Grocery_Store_Locations-2.csv')\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "1.c. Applied Data science is a field of applied mathematics and statistics that provides useful insight based on large amounts of complex data or big data. **In about 100 words, articulate the reason for choosing this dataset. What specific insights or information do you aim to uncover through your analysis of this particular dataset?**"
      ],
      "metadata": {
        "id": "m9nevZElvXR5"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Summary of insight:"
      ],
      "metadata": {
        "id": "oBiXf2lmwHkI"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**2. Exploratory Data Analysis**\n"
      ],
      "metadata": {
        "id": "4QoCh61uwgp3"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "2.a. View the your pandas dataframe"
      ],
      "metadata": {
        "id": "W2QFgoQIxsW_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#insert code\n",
        "print(df)"
      ],
      "metadata": {
        "id": "xYLp3Qw4xsrl",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "851e2578-575a-4eb7-8fcb-13b76bef8309"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "            X          Y                       STORENAME  \\\n",
            "0  -77.026981  38.984455                         Target    \n",
            "1  -77.026066  38.983464  International Progresso Market   \n",
            "2  -77.027798  38.967771               Jocelyn’s Market    \n",
            "3  -77.076459  38.965553                      Magruder's   \n",
            "4  -77.074910  38.964601                         Safeway   \n",
            "..        ...        ...                             ...   \n",
            "80 -76.967401  38.861766                            Lidl   \n",
            "81 -77.008082  38.831205               Good Food Markets   \n",
            "82 -77.055340  38.909535                  Streets Market   \n",
            "83 -77.028135  38.976574              Whole Foods Market   \n",
            "84 -77.032986  38.929308                            Lidl   \n",
            "\n",
            "                         ADDRESS  ZIPCODE       PHONE    WARD           SSL  \\\n",
            "0         7828 GEORGIA AVENUE NW    20012  2028923822  Ward 4  2960    0017   \n",
            "1         7719 GEORGIA AVENUE NW    20012  2025455015  Ward 4  2961    0810   \n",
            "2         6404 GEORGIA AVENUE NW    20012  2027227574  Ward 4  2945    0839   \n",
            "3     5626 CONNECTICUT AVENUE NW    20015  2024644946  Ward 3  1860    0013   \n",
            "4     5545 CONNECTICUT AVENUE NW    20015  2022446097  Ward 3  1867    0092   \n",
            "..                           ...      ...         ...     ...           ...   \n",
            "80     2224 TOWN CENTER DRIVE SE    20020  8447475435  Ward 7  5633    0022   \n",
            "81  4001 SOUTH CAPITOL STREET SW    20032  2022488496  Ward 8  6172    0815   \n",
            "82              2617 P STREET NW    20007  2027350996  Ward 2  1265    0101   \n",
            "83           7150 12TH STREET NW    20012  2028466680  Ward 4  2950    0003   \n",
            "84     3100 14TH STREET NW, #116    20010  8447475435  Ward 1  2674    0721   \n",
            "\n",
            "   NOTES PRESENT90  ...     YCOORD  MAR_ID SE_ANNO_CAD_DATA  \\\n",
            "0    NaN       NaN  ...  146280.07  300512              NaN   \n",
            "1    NaN       NaN  ...  146169.97  285417              NaN   \n",
            "2    NaN       NaN  ...  144428.00  285334              NaN   \n",
            "3              Yes  ...  144184.19  263860              NaN   \n",
            "4               No  ...  144078.34  263999              NaN   \n",
            "..   ...       ...  ...        ...     ...              ...   \n",
            "80   NaN       NaN  ...  132636.72  313156              NaN   \n",
            "81   NaN       NaN  ...  129237.48  276615              NaN   \n",
            "82   NaN       NaN  ...  137964.35  275887              NaN   \n",
            "83   NaN        No  ...  145405.17  334712              NaN   \n",
            "84   NaN        No  ...  140158.41  306304              NaN   \n",
            "\n",
            "                                  GLOBALID    CREATOR                 CREATED  \\\n",
            "0   {CE302122-4E8D-4DC7-845B-06563B993F66}       JLAY  2022/09/28 18:04:54+00   \n",
            "1   {2C18863D-40DE-4F66-AA59-46F1C65D67F2}       JLAY  2022/09/28 18:04:54+00   \n",
            "2   {A0B448C3-B3FB-49FE-B8BF-1FEBA3CEA642}       JLAY  2022/09/28 18:04:54+00   \n",
            "3   {9ABE1C46-BB48-4110-B5BA-C6363CA3BD7A}       JLAY  2022/09/28 18:04:54+00   \n",
            "4   {902F540E-FE16-43A5-8010-CD84E94B28B7}       JLAY  2022/09/28 18:04:54+00   \n",
            "..                                     ...        ...                     ...   \n",
            "80  {657A36ED-8179-4F52-B969-A9B5B5A37437}       JLAY  2022/09/28 18:04:54+00   \n",
            "81  {6687A883-515F-4E5E-A252-2610DA85DDED}       JLAY  2022/09/28 18:04:54+00   \n",
            "82  {07F7DAF6-0B56-43FE-9DC9-86634EF9DAFF}  GHATCHARD  2023/05/17 15:23:12+00   \n",
            "83  {D67B7C47-1873-455E-9891-CAA0F0D4DFBF}  GHATCHARD  2023/06/28 13:10:21+00   \n",
            "84  {61B4CD00-7A62-4328-A071-834DEF99283A}  GHATCHARD  2023/06/28 13:18:47+00   \n",
            "\n",
            "       EDITOR                  EDITED PRESENT22 PRESENT23  \n",
            "0   GHATCHARD  2023/05/17 15:23:12+00       Yes       Yes  \n",
            "1   GHATCHARD  2023/05/17 15:23:12+00       Yes       Yes  \n",
            "2   GHATCHARD  2023/05/17 15:23:12+00       Yes       Yes  \n",
            "3   GHATCHARD  2023/05/17 15:23:12+00       Yes       Yes  \n",
            "4   GHATCHARD  2023/05/17 15:23:12+00       Yes       Yes  \n",
            "..        ...                     ...       ...       ...  \n",
            "80  GHATCHARD  2023/05/17 15:23:12+00       Yes       Yes  \n",
            "81  GHATCHARD  2023/05/17 15:23:12+00       Yes        No  \n",
            "82  GHATCHARD  2023/06/28 13:24:05+00       NaN       Yes  \n",
            "83  GHATCHARD  2023/06/28 13:15:52+00        No       Yes  \n",
            "84  GHATCHARD  2023/06/28 13:18:47+00        No       Yes  \n",
            "\n",
            "[85 rows x 37 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "2.b. Display the **shape** (number of rows and columns) of the dataframe."
      ],
      "metadata": {
        "id": "Kowi7whqyNjU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#insert code\n",
        "print(df.shape)"
      ],
      "metadata": {
        "id": "81ZwpNBKyVBa",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "96117c00-cb6d-4118-e3fe-fd78b7f96350"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(85, 37)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "2.c. Display the **first 5 rows** of the dataset."
      ],
      "metadata": {
        "id": "pXgsQR6RxRXZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#insert code\n",
        "print (df.head())"
      ],
      "metadata": {
        "id": "gDMsjoyjxjRz",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "967fe7b0-060c-44ef-fabb-4e4921dbbf53"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "           X          Y                       STORENAME  \\\n",
            "0 -77.026981  38.984455                         Target    \n",
            "1 -77.026066  38.983464  International Progresso Market   \n",
            "2 -77.027798  38.967771               Jocelyn’s Market    \n",
            "3 -77.076459  38.965553                      Magruder's   \n",
            "4 -77.074910  38.964601                         Safeway   \n",
            "\n",
            "                      ADDRESS  ZIPCODE       PHONE    WARD           SSL  \\\n",
            "0      7828 GEORGIA AVENUE NW    20012  2028923822  Ward 4  2960    0017   \n",
            "1      7719 GEORGIA AVENUE NW    20012  2025455015  Ward 4  2961    0810   \n",
            "2      6404 GEORGIA AVENUE NW    20012  2027227574  Ward 4  2945    0839   \n",
            "3  5626 CONNECTICUT AVENUE NW    20015  2024644946  Ward 3  1860    0013   \n",
            "4  5545 CONNECTICUT AVENUE NW    20015  2022446097  Ward 3  1867    0092   \n",
            "\n",
            "  NOTES PRESENT90  ...     YCOORD  MAR_ID SE_ANNO_CAD_DATA  \\\n",
            "0   NaN       NaN  ...  146280.07  300512              NaN   \n",
            "1   NaN       NaN  ...  146169.97  285417              NaN   \n",
            "2   NaN       NaN  ...  144428.00  285334              NaN   \n",
            "3             Yes  ...  144184.19  263860              NaN   \n",
            "4              No  ...  144078.34  263999              NaN   \n",
            "\n",
            "                                 GLOBALID CREATOR                 CREATED  \\\n",
            "0  {CE302122-4E8D-4DC7-845B-06563B993F66}    JLAY  2022/09/28 18:04:54+00   \n",
            "1  {2C18863D-40DE-4F66-AA59-46F1C65D67F2}    JLAY  2022/09/28 18:04:54+00   \n",
            "2  {A0B448C3-B3FB-49FE-B8BF-1FEBA3CEA642}    JLAY  2022/09/28 18:04:54+00   \n",
            "3  {9ABE1C46-BB48-4110-B5BA-C6363CA3BD7A}    JLAY  2022/09/28 18:04:54+00   \n",
            "4  {902F540E-FE16-43A5-8010-CD84E94B28B7}    JLAY  2022/09/28 18:04:54+00   \n",
            "\n",
            "      EDITOR                  EDITED PRESENT22 PRESENT23  \n",
            "0  GHATCHARD  2023/05/17 15:23:12+00       Yes       Yes  \n",
            "1  GHATCHARD  2023/05/17 15:23:12+00       Yes       Yes  \n",
            "2  GHATCHARD  2023/05/17 15:23:12+00       Yes       Yes  \n",
            "3  GHATCHARD  2023/05/17 15:23:12+00       Yes       Yes  \n",
            "4  GHATCHARD  2023/05/17 15:23:12+00       Yes       Yes  \n",
            "\n",
            "[5 rows x 37 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "2.d. Display the **last 5 rows** of the dataset."
      ],
      "metadata": {
        "id": "dC48PcX4xneN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#insert code\n",
        "print(df.tail())"
      ],
      "metadata": {
        "id": "sxaB5eOOxoR_",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3a1f1df2-2afd-4fa8-c8e7-1f2f1336298e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "            X          Y           STORENAME                       ADDRESS  \\\n",
            "80 -76.967401  38.861766                Lidl     2224 TOWN CENTER DRIVE SE   \n",
            "81 -77.008082  38.831205   Good Food Markets  4001 SOUTH CAPITOL STREET SW   \n",
            "82 -77.055340  38.909535      Streets Market              2617 P STREET NW   \n",
            "83 -77.028135  38.976574  Whole Foods Market           7150 12TH STREET NW   \n",
            "84 -77.032986  38.929308                Lidl     3100 14TH STREET NW, #116   \n",
            "\n",
            "    ZIPCODE       PHONE    WARD           SSL NOTES PRESENT90  ...     YCOORD  \\\n",
            "80    20020  8447475435  Ward 7  5633    0022   NaN       NaN  ...  132636.72   \n",
            "81    20032  2022488496  Ward 8  6172    0815   NaN       NaN  ...  129237.48   \n",
            "82    20007  2027350996  Ward 2  1265    0101   NaN       NaN  ...  137964.35   \n",
            "83    20012  2028466680  Ward 4  2950    0003   NaN        No  ...  145405.17   \n",
            "84    20010  8447475435  Ward 1  2674    0721   NaN        No  ...  140158.41   \n",
            "\n",
            "    MAR_ID SE_ANNO_CAD_DATA                                GLOBALID  \\\n",
            "80  313156              NaN  {657A36ED-8179-4F52-B969-A9B5B5A37437}   \n",
            "81  276615              NaN  {6687A883-515F-4E5E-A252-2610DA85DDED}   \n",
            "82  275887              NaN  {07F7DAF6-0B56-43FE-9DC9-86634EF9DAFF}   \n",
            "83  334712              NaN  {D67B7C47-1873-455E-9891-CAA0F0D4DFBF}   \n",
            "84  306304              NaN  {61B4CD00-7A62-4328-A071-834DEF99283A}   \n",
            "\n",
            "      CREATOR                 CREATED     EDITOR                  EDITED  \\\n",
            "80       JLAY  2022/09/28 18:04:54+00  GHATCHARD  2023/05/17 15:23:12+00   \n",
            "81       JLAY  2022/09/28 18:04:54+00  GHATCHARD  2023/05/17 15:23:12+00   \n",
            "82  GHATCHARD  2023/05/17 15:23:12+00  GHATCHARD  2023/06/28 13:24:05+00   \n",
            "83  GHATCHARD  2023/06/28 13:10:21+00  GHATCHARD  2023/06/28 13:15:52+00   \n",
            "84  GHATCHARD  2023/06/28 13:18:47+00  GHATCHARD  2023/06/28 13:18:47+00   \n",
            "\n",
            "   PRESENT22 PRESENT23  \n",
            "80       Yes       Yes  \n",
            "81       Yes        No  \n",
            "82       NaN       Yes  \n",
            "83        No       Yes  \n",
            "84        No       Yes  \n",
            "\n",
            "[5 rows x 37 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "2.e. Display the information on the range of the indexes, the data type of each column, and the memory usage of the dataframe of the dataframe."
      ],
      "metadata": {
        "id": "Q8SRNBvoyqae"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#insert code\n",
        "print(df.index)\n",
        "print(df.dtypes)\n",
        "print(df.memory_usage())"
      ],
      "metadata": {
        "id": "J2S5KwQoy3en",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "25105e94-79d8-48db-9d05-8581b43be288"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RangeIndex(start=0, stop=85, step=1)\n",
            "X                   float64\n",
            "Y                   float64\n",
            "STORENAME            object\n",
            "ADDRESS              object\n",
            "ZIPCODE               int64\n",
            "PHONE                 int64\n",
            "WARD                 object\n",
            "SSL                  object\n",
            "NOTES                object\n",
            "PRESENT90            object\n",
            "PRESENT95            object\n",
            "PRESENT00            object\n",
            "PRESENT05            object\n",
            "PRESENT08            object\n",
            "PRESENT09            object\n",
            "PRESENT10            object\n",
            "PRESENT11            object\n",
            "PRESENT12            object\n",
            "PRESENT13            object\n",
            "PRESENT14            object\n",
            "PRESENT15            object\n",
            "PRESENT16            object\n",
            "PRESENT17            object\n",
            "PRESENT18            object\n",
            "GIS_ID               object\n",
            "OBJECTID              int64\n",
            "XCOORD              float64\n",
            "YCOORD              float64\n",
            "MAR_ID                int64\n",
            "SE_ANNO_CAD_DATA    float64\n",
            "GLOBALID             object\n",
            "CREATOR              object\n",
            "CREATED              object\n",
            "EDITOR               object\n",
            "EDITED               object\n",
            "PRESENT22            object\n",
            "PRESENT23            object\n",
            "dtype: object\n",
            "Index               128\n",
            "X                   680\n",
            "Y                   680\n",
            "STORENAME           680\n",
            "ADDRESS             680\n",
            "ZIPCODE             680\n",
            "PHONE               680\n",
            "WARD                680\n",
            "SSL                 680\n",
            "NOTES               680\n",
            "PRESENT90           680\n",
            "PRESENT95           680\n",
            "PRESENT00           680\n",
            "PRESENT05           680\n",
            "PRESENT08           680\n",
            "PRESENT09           680\n",
            "PRESENT10           680\n",
            "PRESENT11           680\n",
            "PRESENT12           680\n",
            "PRESENT13           680\n",
            "PRESENT14           680\n",
            "PRESENT15           680\n",
            "PRESENT16           680\n",
            "PRESENT17           680\n",
            "PRESENT18           680\n",
            "GIS_ID              680\n",
            "OBJECTID            680\n",
            "XCOORD              680\n",
            "YCOORD              680\n",
            "MAR_ID              680\n",
            "SE_ANNO_CAD_DATA    680\n",
            "GLOBALID            680\n",
            "CREATOR             680\n",
            "CREATED             680\n",
            "EDITOR              680\n",
            "EDITED              680\n",
            "PRESENT22           680\n",
            "PRESENT23           680\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "2.f. In approximately 500 words, provide a meaningful description of the data in the DataFrame. Share your observations regarding the DataFrame and its content. Highlight any notable patterns or anomalies that catch your attention. Consider the data types present and evaluate their significance in the context of your analysis. Assess whether the dataset's shape and size are sufficient for drawing generalizable conclusions, addressing the potential impact of sample size on the robustness of any findings. Ensure to provide a comprehensive overview that reflects your initial insights and considerations upon exploring the dataset."
      ],
      "metadata": {
        "id": "2BgHH237y5JL"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "EDA Summary: The dataset is a list of grocery stores locations in Washington, DC. The dataset provides the XY coordinates of each grocery store location and a unique GIS ID which both can be used for mapping and graphing the exact location of each store. The SSL or ‘Suffix Square Lot’ and Ward columns are specific location indicators used in DC for location, which can aid in mapping like above.\n",
        "\n",
        "This information can also be used to examine the specifics of food accessibility in poorer areas of the district. The dataset findings show that there are 16 stores in Ward 3, but only 8 stores in both wards 7 and 8, collectively. This dataset can inform policy makers on how to better foster development that can serve low income areas.\n",
        "\n",
        "The store names are also provided, which can be used to determine which chains are popular among the area, or specialty stores that may only be housed within one neighborhood. As gentrification has rapidly expanded development in DC, more high-end grocers are attracted to the market. Columns which provide data on grocery store presence from 2000 to 2023 can allow for greater analysis on what types of stores were available pre-gentrification (before the year 2000) and up until 2013, which was the most rapid period for gentrification in DC.\n",
        "\n",
        "Overall, the dataset is robust to allow for analysis on when stores were present, for how long within a 23 year period and how food accessibility is important.\n"
      ],
      "metadata": {
        "id": "Ua6CDFrozokc"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "2.e. Identify any missing values in the dataset. If present, provide a strategy to handle them and implement the strategy.\n",
        "\n",
        "There are a few null values throughout the dataset. The 'notes' column is a list of neighborhoods and nicknames for parts of the District where stores are located. To complete this, the addresses and wards can be used to determine the neighborhood name and complete the column data.\n",
        "\n",
        "There are also null values in the 'Present' columns as the creator may not have had available data on how long the stores have been open. Utilizing the DC tax search wesbite, we can detemine when the listed properties were sold or pruchased by the store chains and complete the tables."
      ],
      "metadata": {
        "id": "vKFV8H0qz7t4"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**3. Data wrangling**"
      ],
      "metadata": {
        "id": "DPDsBo_x0uJa"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "3.a. Rename (2) two columns in the dataframe. Explain why you renamed these columns."
      ],
      "metadata": {
        "id": "3xRzjqRZ0yeC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "UpdatedColumns = {'SSL': 'Square Suffix Lot',\n",
        "                  'NOTES': 'Neighborhood'}\n",
        "\n",
        "df = df.rename(columns=UpdatedColumns)\n",
        "print(df)"
      ],
      "metadata": {
        "id": "_QYgwVT80-Kz",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e7d2b530-011e-4704-fb15-a395269ad4cb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "            X          Y                       STORENAME  \\\n",
            "0  -77.026981  38.984455                         Target    \n",
            "1  -77.026066  38.983464  International Progresso Market   \n",
            "2  -77.027798  38.967771               Jocelyn’s Market    \n",
            "3  -77.076459  38.965553                      Magruder's   \n",
            "4  -77.074910  38.964601                         Safeway   \n",
            "..        ...        ...                             ...   \n",
            "80 -76.967401  38.861766                            Lidl   \n",
            "81 -77.008082  38.831205               Good Food Markets   \n",
            "82 -77.055340  38.909535                  Streets Market   \n",
            "83 -77.028135  38.976574              Whole Foods Market   \n",
            "84 -77.032986  38.929308                            Lidl   \n",
            "\n",
            "                         ADDRESS  ZIPCODE       PHONE    WARD  \\\n",
            "0         7828 GEORGIA AVENUE NW    20012  2028923822  Ward 4   \n",
            "1         7719 GEORGIA AVENUE NW    20012  2025455015  Ward 4   \n",
            "2         6404 GEORGIA AVENUE NW    20012  2027227574  Ward 4   \n",
            "3     5626 CONNECTICUT AVENUE NW    20015  2024644946  Ward 3   \n",
            "4     5545 CONNECTICUT AVENUE NW    20015  2022446097  Ward 3   \n",
            "..                           ...      ...         ...     ...   \n",
            "80     2224 TOWN CENTER DRIVE SE    20020  8447475435  Ward 7   \n",
            "81  4001 SOUTH CAPITOL STREET SW    20032  2022488496  Ward 8   \n",
            "82              2617 P STREET NW    20007  2027350996  Ward 2   \n",
            "83           7150 12TH STREET NW    20012  2028466680  Ward 4   \n",
            "84     3100 14TH STREET NW, #116    20010  8447475435  Ward 1   \n",
            "\n",
            "   Square Suffix Lot Neighborhood PRESENT90  ...     YCOORD  MAR_ID  \\\n",
            "0       2960    0017          NaN       NaN  ...  146280.07  300512   \n",
            "1       2961    0810          NaN       NaN  ...  146169.97  285417   \n",
            "2       2945    0839          NaN       NaN  ...  144428.00  285334   \n",
            "3       1860    0013                    Yes  ...  144184.19  263860   \n",
            "4       1867    0092                     No  ...  144078.34  263999   \n",
            "..               ...          ...       ...  ...        ...     ...   \n",
            "80      5633    0022          NaN       NaN  ...  132636.72  313156   \n",
            "81      6172    0815          NaN       NaN  ...  129237.48  276615   \n",
            "82      1265    0101          NaN       NaN  ...  137964.35  275887   \n",
            "83      2950    0003          NaN        No  ...  145405.17  334712   \n",
            "84      2674    0721          NaN        No  ...  140158.41  306304   \n",
            "\n",
            "   SE_ANNO_CAD_DATA                                GLOBALID    CREATOR  \\\n",
            "0               NaN  {CE302122-4E8D-4DC7-845B-06563B993F66}       JLAY   \n",
            "1               NaN  {2C18863D-40DE-4F66-AA59-46F1C65D67F2}       JLAY   \n",
            "2               NaN  {A0B448C3-B3FB-49FE-B8BF-1FEBA3CEA642}       JLAY   \n",
            "3               NaN  {9ABE1C46-BB48-4110-B5BA-C6363CA3BD7A}       JLAY   \n",
            "4               NaN  {902F540E-FE16-43A5-8010-CD84E94B28B7}       JLAY   \n",
            "..              ...                                     ...        ...   \n",
            "80              NaN  {657A36ED-8179-4F52-B969-A9B5B5A37437}       JLAY   \n",
            "81              NaN  {6687A883-515F-4E5E-A252-2610DA85DDED}       JLAY   \n",
            "82              NaN  {07F7DAF6-0B56-43FE-9DC9-86634EF9DAFF}  GHATCHARD   \n",
            "83              NaN  {D67B7C47-1873-455E-9891-CAA0F0D4DFBF}  GHATCHARD   \n",
            "84              NaN  {61B4CD00-7A62-4328-A071-834DEF99283A}  GHATCHARD   \n",
            "\n",
            "                   CREATED     EDITOR                  EDITED PRESENT22  \\\n",
            "0   2022/09/28 18:04:54+00  GHATCHARD  2023/05/17 15:23:12+00       Yes   \n",
            "1   2022/09/28 18:04:54+00  GHATCHARD  2023/05/17 15:23:12+00       Yes   \n",
            "2   2022/09/28 18:04:54+00  GHATCHARD  2023/05/17 15:23:12+00       Yes   \n",
            "3   2022/09/28 18:04:54+00  GHATCHARD  2023/05/17 15:23:12+00       Yes   \n",
            "4   2022/09/28 18:04:54+00  GHATCHARD  2023/05/17 15:23:12+00       Yes   \n",
            "..                     ...        ...                     ...       ...   \n",
            "80  2022/09/28 18:04:54+00  GHATCHARD  2023/05/17 15:23:12+00       Yes   \n",
            "81  2022/09/28 18:04:54+00  GHATCHARD  2023/05/17 15:23:12+00       Yes   \n",
            "82  2023/05/17 15:23:12+00  GHATCHARD  2023/06/28 13:24:05+00       NaN   \n",
            "83  2023/06/28 13:10:21+00  GHATCHARD  2023/06/28 13:15:52+00        No   \n",
            "84  2023/06/28 13:18:47+00  GHATCHARD  2023/06/28 13:18:47+00        No   \n",
            "\n",
            "   PRESENT23  \n",
            "0        Yes  \n",
            "1        Yes  \n",
            "2        Yes  \n",
            "3        Yes  \n",
            "4        Yes  \n",
            "..       ...  \n",
            "80       Yes  \n",
            "81        No  \n",
            "82       Yes  \n",
            "83       Yes  \n",
            "84       Yes  \n",
            "\n",
            "[85 rows x 37 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "3.b. Create (1) one new column in the dataframe based on a mathematical operation involving two existing columns. Explain why you created this new column."
      ],
      "metadata": {
        "id": "lRnNrzxK2LRx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Created a conditional statement\n",
        "df['Still Open?'] = 'Yes'\n",
        "condition = (df['PRESENT22'] == 'Yes') & (df['PRESENT23'] == 'No')\n",
        "df.loc[condition, 'Still Open?'] = 'Closed'\n",
        "print(df)\n",
        "\n",
        "#Printing a statment to determine how many stores closed within 2022 and 2023 utilzing the sum feature\n",
        "Stores_in2022 = (df['PRESENT22'] == 'Yes').sum()\n",
        "Stores_in2023 = (df['PRESENT23'] == 'Yes').sum()\n",
        "print(f\"There were {Stores_in2022} stores open in 2022 but only {Stores_in2023} left by 2023.\")"
      ],
      "metadata": {
        "id": "2BV3SXC82Zjt",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7cb3e6ad-a6ed-43e7-b4a2-50cdb2a049ac"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "            X          Y                       STORENAME  \\\n",
            "0  -77.026981  38.984455                         Target    \n",
            "1  -77.026066  38.983464  International Progresso Market   \n",
            "2  -77.027798  38.967771               Jocelyn’s Market    \n",
            "3  -77.076459  38.965553                      Magruder's   \n",
            "4  -77.074910  38.964601                         Safeway   \n",
            "..        ...        ...                             ...   \n",
            "80 -76.967401  38.861766                            Lidl   \n",
            "81 -77.008082  38.831205               Good Food Markets   \n",
            "82 -77.055340  38.909535                  Streets Market   \n",
            "83 -77.028135  38.976574              Whole Foods Market   \n",
            "84 -77.032986  38.929308                            Lidl   \n",
            "\n",
            "                         ADDRESS  ZIPCODE       PHONE    WARD  \\\n",
            "0         7828 GEORGIA AVENUE NW    20012  2028923822  Ward 4   \n",
            "1         7719 GEORGIA AVENUE NW    20012  2025455015  Ward 4   \n",
            "2         6404 GEORGIA AVENUE NW    20012  2027227574  Ward 4   \n",
            "3     5626 CONNECTICUT AVENUE NW    20015  2024644946  Ward 3   \n",
            "4     5545 CONNECTICUT AVENUE NW    20015  2022446097  Ward 3   \n",
            "..                           ...      ...         ...     ...   \n",
            "80     2224 TOWN CENTER DRIVE SE    20020  8447475435  Ward 7   \n",
            "81  4001 SOUTH CAPITOL STREET SW    20032  2022488496  Ward 8   \n",
            "82              2617 P STREET NW    20007  2027350996  Ward 2   \n",
            "83           7150 12TH STREET NW    20012  2028466680  Ward 4   \n",
            "84     3100 14TH STREET NW, #116    20010  8447475435  Ward 1   \n",
            "\n",
            "   Square Suffix Lot Neighborhood PRESENT90  ...  MAR_ID SE_ANNO_CAD_DATA  \\\n",
            "0       2960    0017          NaN       NaN  ...  300512              NaN   \n",
            "1       2961    0810          NaN       NaN  ...  285417              NaN   \n",
            "2       2945    0839          NaN       NaN  ...  285334              NaN   \n",
            "3       1860    0013                    Yes  ...  263860              NaN   \n",
            "4       1867    0092                     No  ...  263999              NaN   \n",
            "..               ...          ...       ...  ...     ...              ...   \n",
            "80      5633    0022          NaN       NaN  ...  313156              NaN   \n",
            "81      6172    0815          NaN       NaN  ...  276615              NaN   \n",
            "82      1265    0101          NaN       NaN  ...  275887              NaN   \n",
            "83      2950    0003          NaN        No  ...  334712              NaN   \n",
            "84      2674    0721          NaN        No  ...  306304              NaN   \n",
            "\n",
            "                                  GLOBALID    CREATOR                 CREATED  \\\n",
            "0   {CE302122-4E8D-4DC7-845B-06563B993F66}       JLAY  2022/09/28 18:04:54+00   \n",
            "1   {2C18863D-40DE-4F66-AA59-46F1C65D67F2}       JLAY  2022/09/28 18:04:54+00   \n",
            "2   {A0B448C3-B3FB-49FE-B8BF-1FEBA3CEA642}       JLAY  2022/09/28 18:04:54+00   \n",
            "3   {9ABE1C46-BB48-4110-B5BA-C6363CA3BD7A}       JLAY  2022/09/28 18:04:54+00   \n",
            "4   {902F540E-FE16-43A5-8010-CD84E94B28B7}       JLAY  2022/09/28 18:04:54+00   \n",
            "..                                     ...        ...                     ...   \n",
            "80  {657A36ED-8179-4F52-B969-A9B5B5A37437}       JLAY  2022/09/28 18:04:54+00   \n",
            "81  {6687A883-515F-4E5E-A252-2610DA85DDED}       JLAY  2022/09/28 18:04:54+00   \n",
            "82  {07F7DAF6-0B56-43FE-9DC9-86634EF9DAFF}  GHATCHARD  2023/05/17 15:23:12+00   \n",
            "83  {D67B7C47-1873-455E-9891-CAA0F0D4DFBF}  GHATCHARD  2023/06/28 13:10:21+00   \n",
            "84  {61B4CD00-7A62-4328-A071-834DEF99283A}  GHATCHARD  2023/06/28 13:18:47+00   \n",
            "\n",
            "       EDITOR                  EDITED PRESENT22 PRESENT23 Still Open?  \n",
            "0   GHATCHARD  2023/05/17 15:23:12+00       Yes       Yes         Yes  \n",
            "1   GHATCHARD  2023/05/17 15:23:12+00       Yes       Yes         Yes  \n",
            "2   GHATCHARD  2023/05/17 15:23:12+00       Yes       Yes         Yes  \n",
            "3   GHATCHARD  2023/05/17 15:23:12+00       Yes       Yes         Yes  \n",
            "4   GHATCHARD  2023/05/17 15:23:12+00       Yes       Yes         Yes  \n",
            "..        ...                     ...       ...       ...         ...  \n",
            "80  GHATCHARD  2023/05/17 15:23:12+00       Yes       Yes         Yes  \n",
            "81  GHATCHARD  2023/05/17 15:23:12+00       Yes        No      Closed  \n",
            "82  GHATCHARD  2023/06/28 13:24:05+00       NaN       Yes         Yes  \n",
            "83  GHATCHARD  2023/06/28 13:15:52+00        No       Yes         Yes  \n",
            "84  GHATCHARD  2023/06/28 13:18:47+00        No       Yes         Yes  \n",
            "\n",
            "[85 rows x 38 columns]\n",
            "There were 75 stores open in 2022 but only 73 left by 2023.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "3.c. Create (1) one new column in the dataframe based on a  operation involving existing columns or new information. Explain why you created this new column."
      ],
      "metadata": {
        "id": "LPDCHo6_6fy2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "ZJguuisl648y"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "3.d. Based on your data wrangling, in approximately 200 words, provide a meaningful description of the new data in the DataFrame. Share your observations regarding the DataFrame and its content. Highlight any notable patterns or anomalies that catch your attention. Consider the data types present and evaluate their significance in the context of your analysis. Assess whether the dataset's shape and size are sufficient for drawing generalizable conclusions, addressing the potential impact of sample size on the robustness of any findings.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "EVbFqUKZ2tZW"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Summary:\n",
        "In the data wrangling, there was a column added on whether a store was present in 2022 but closed in 2023. This provides an understanding of how many grocery stores closed within the past year, and where the stores were closed at. This is important because it is a comprehensive way to utilize code to update and clean data. To better analyze the current state of where stores are located and where residents may be impacted, we can update the dataset as needed with the use of the conditional statement used. The dataset shape is sufficient to determine the closings within 1 year."
      ],
      "metadata": {
        "id": "A3AiuX0n270V"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Descriptive Statistics**"
      ],
      "metadata": {
        "id": "P0HUPxKF29Yg"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "4.a Display summary statistics of your dataframe."
      ],
      "metadata": {
        "id": "TgFfPrGn3CaO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#insert code\n",
        "print(df.describe())"
      ],
      "metadata": {
        "id": "8lQVZe5N3Bdw",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "990d771e-a803-428d-e130-493a82c5e864"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "               X          Y       ZIPCODE         PHONE    OBJECTID  \\\n",
            "count  85.000000  85.000000     85.000000  8.500000e+01   85.000000   \n",
            "mean  -77.027085  38.919520  20011.411765  2.253413e+09  691.400000   \n",
            "std     0.034021   0.029695      9.166832  1.199020e+09   57.076849   \n",
            "min   -77.095962  38.831205  20001.000000  2.022234e+09  641.000000   \n",
            "25%   -77.049070  38.904199  20005.000000  2.023376e+09  662.000000   \n",
            "50%   -77.027798  38.919230  20010.000000  2.025474e+09  683.000000   \n",
            "75%   -77.001647  38.936824  20016.000000  2.027261e+09  704.000000   \n",
            "max   -76.947457  38.984455  20037.000000  8.559553e+09  963.000000   \n",
            "\n",
            "              XCOORD         YCOORD        MAR_ID  SE_ANNO_CAD_DATA  \n",
            "count      85.000000      85.000000      85.00000               0.0  \n",
            "mean   397652.332471  139071.276588  272402.80000               NaN  \n",
            "std      2949.253019    3298.063287   59540.51686               NaN  \n",
            "min    391678.110000  129237.480000   26239.00000               NaN  \n",
            "25%    395743.740000  137371.890000  259021.00000               NaN  \n",
            "50%    397591.160000  139039.130000  288529.00000               NaN  \n",
            "75%    399857.330000  140992.280000  306304.00000               NaN  \n",
            "max    404558.400000  146280.070000  334712.00000               NaN  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "4.b Based on the summary statistic in approximately 200 words, provide a meaningful description of the data in the dataframe. Share your observations regarding the count, mean, min, and max."
      ],
      "metadata": {
        "id": "sYOu-JdZ3QYi"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Summary:"
      ],
      "metadata": {
        "id": "_wAUfkSB31sT"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "4.c. Display the largest number of items in a column of (1) one numerical variable. Explain the outcome"
      ],
      "metadata": {
        "id": "3o1mWofI35Qv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#maximum of the MAR ID\n",
        "print(df['MAR_ID'].max())"
      ],
      "metadata": {
        "id": "Fwe-Yp1P3PsA",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f23f86c7-a998-4e30-eb74-a3d948da3f17"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "334712\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "4.d. Display the smallest number of items in a column of (2) two numerical variable. Explain the outcome"
      ],
      "metadata": {
        "id": "-rl0BiPO5kdN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#minimum of the MAR ID\n",
        "print(df['MAR_ID'].min())\n",
        "\n",
        "#minimum of the Object ID\n",
        "print(df['OBJECTID'].min())"
      ],
      "metadata": {
        "id": "RztPHA5R7Bze",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "bbe35142-1557-4dce-b58b-6463ccd1b91b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "26239\n",
            "641\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "4.e. Display the mode of an item in a column of (2) two catergorical object variables. Explain the outcome"
      ],
      "metadata": {
        "id": "gbG8UCrr5t1e"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#mode of grocery store types\n",
        "print(df['STORENAME'].mode())\n",
        "\n",
        "#mode of number of stores within a ward\n",
        "print(df['WARD'].mode())"
      ],
      "metadata": {
        "id": "ZBubgaVb6Mek",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b07357eb-d41a-475d-9849-47f3ae14fede"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0    Safeway\n",
            "Name: STORENAME, dtype: object\n",
            "0    Ward 3\n",
            "Name: WARD, dtype: object\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Data Insights and Recommendations**"
      ],
      "metadata": {
        "id": "R8EvAI4m7MJJ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "5.a. In a seperate PDF write a (2-3) page overview of your final project.\n",
        "\n",
        "**Title:**\n",
        "Example: Exploratory Data Analysis and Insights of\n",
        "\n",
        "**Introduction:**\n",
        "Briefly introduce the dataset and its relevance.\n",
        "State the objectives of your analysis.\n",
        "\n",
        "**Data Description:**\n",
        "Describe the variables, including data types, ranges, and potential challenges\n",
        "\n",
        "**Data Cleaning**\n",
        "Discuss the identified issues (missing values, outliers).\n",
        "Explain the cleaning strategies and provide code.\n",
        "\n",
        "**Exploratory Data Analysis:**\n",
        "Present summary statistics and visualizations.\n",
        "Discuss any patterns or trends observed.\n",
        "\n",
        "**Variable Transformation:**\n",
        "Explain the need for transformation.\n",
        "Provide code and discuss the impact.\n",
        "\n",
        "**Summarize findings**\n",
        "Provide actionable recommendations.\n",
        "\n",
        "**Discuss limitations and suggest future steps.**\n",
        "\n"
      ],
      "metadata": {
        "id": "iMQFKR--7OD0"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Extra Credit**"
      ],
      "metadata": {
        "id": "vxt3gv9v9Kyr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#fill the null values\n",
        "null_values= df.fillna('N/A')\n",
        "print(null_values)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8he8LieHPqkL",
        "outputId": "6f50d660-1afd-4f73-8054-0a6ba9aa9a7b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "            X          Y                       STORENAME  \\\n",
            "0  -77.026981  38.984455                         Target    \n",
            "1  -77.026066  38.983464  International Progresso Market   \n",
            "2  -77.027798  38.967771               Jocelyn’s Market    \n",
            "3  -77.076459  38.965553                      Magruder's   \n",
            "4  -77.074910  38.964601                         Safeway   \n",
            "..        ...        ...                             ...   \n",
            "80 -76.967401  38.861766                            Lidl   \n",
            "81 -77.008082  38.831205               Good Food Markets   \n",
            "82 -77.055340  38.909535                  Streets Market   \n",
            "83 -77.028135  38.976574              Whole Foods Market   \n",
            "84 -77.032986  38.929308                            Lidl   \n",
            "\n",
            "                         ADDRESS  ZIPCODE       PHONE    WARD  \\\n",
            "0         7828 GEORGIA AVENUE NW    20012  2028923822  Ward 4   \n",
            "1         7719 GEORGIA AVENUE NW    20012  2025455015  Ward 4   \n",
            "2         6404 GEORGIA AVENUE NW    20012  2027227574  Ward 4   \n",
            "3     5626 CONNECTICUT AVENUE NW    20015  2024644946  Ward 3   \n",
            "4     5545 CONNECTICUT AVENUE NW    20015  2022446097  Ward 3   \n",
            "..                           ...      ...         ...     ...   \n",
            "80     2224 TOWN CENTER DRIVE SE    20020  8447475435  Ward 7   \n",
            "81  4001 SOUTH CAPITOL STREET SW    20032  2022488496  Ward 8   \n",
            "82              2617 P STREET NW    20007  2027350996  Ward 2   \n",
            "83           7150 12TH STREET NW    20012  2028466680  Ward 4   \n",
            "84     3100 14TH STREET NW, #116    20010  8447475435  Ward 1   \n",
            "\n",
            "   Square Suffix Lot Neighborhood PRESENT90  ...  MAR_ID SE_ANNO_CAD_DATA  \\\n",
            "0       2960    0017          N/A       N/A  ...  300512              N/A   \n",
            "1       2961    0810          N/A       N/A  ...  285417              N/A   \n",
            "2       2945    0839          N/A       N/A  ...  285334              N/A   \n",
            "3       1860    0013                    Yes  ...  263860              N/A   \n",
            "4       1867    0092                     No  ...  263999              N/A   \n",
            "..               ...          ...       ...  ...     ...              ...   \n",
            "80      5633    0022          N/A       N/A  ...  313156              N/A   \n",
            "81      6172    0815          N/A       N/A  ...  276615              N/A   \n",
            "82      1265    0101          N/A       N/A  ...  275887              N/A   \n",
            "83      2950    0003          N/A        No  ...  334712              N/A   \n",
            "84      2674    0721          N/A        No  ...  306304              N/A   \n",
            "\n",
            "                                  GLOBALID    CREATOR                 CREATED  \\\n",
            "0   {CE302122-4E8D-4DC7-845B-06563B993F66}       JLAY  2022/09/28 18:04:54+00   \n",
            "1   {2C18863D-40DE-4F66-AA59-46F1C65D67F2}       JLAY  2022/09/28 18:04:54+00   \n",
            "2   {A0B448C3-B3FB-49FE-B8BF-1FEBA3CEA642}       JLAY  2022/09/28 18:04:54+00   \n",
            "3   {9ABE1C46-BB48-4110-B5BA-C6363CA3BD7A}       JLAY  2022/09/28 18:04:54+00   \n",
            "4   {902F540E-FE16-43A5-8010-CD84E94B28B7}       JLAY  2022/09/28 18:04:54+00   \n",
            "..                                     ...        ...                     ...   \n",
            "80  {657A36ED-8179-4F52-B969-A9B5B5A37437}       JLAY  2022/09/28 18:04:54+00   \n",
            "81  {6687A883-515F-4E5E-A252-2610DA85DDED}       JLAY  2022/09/28 18:04:54+00   \n",
            "82  {07F7DAF6-0B56-43FE-9DC9-86634EF9DAFF}  GHATCHARD  2023/05/17 15:23:12+00   \n",
            "83  {D67B7C47-1873-455E-9891-CAA0F0D4DFBF}  GHATCHARD  2023/06/28 13:10:21+00   \n",
            "84  {61B4CD00-7A62-4328-A071-834DEF99283A}  GHATCHARD  2023/06/28 13:18:47+00   \n",
            "\n",
            "       EDITOR                  EDITED PRESENT22 PRESENT23 Still Open?  \n",
            "0   GHATCHARD  2023/05/17 15:23:12+00       Yes       Yes         Yes  \n",
            "1   GHATCHARD  2023/05/17 15:23:12+00       Yes       Yes         Yes  \n",
            "2   GHATCHARD  2023/05/17 15:23:12+00       Yes       Yes         Yes  \n",
            "3   GHATCHARD  2023/05/17 15:23:12+00       Yes       Yes         Yes  \n",
            "4   GHATCHARD  2023/05/17 15:23:12+00       Yes       Yes         Yes  \n",
            "..        ...                     ...       ...       ...         ...  \n",
            "80  GHATCHARD  2023/05/17 15:23:12+00       Yes       Yes         Yes  \n",
            "81  GHATCHARD  2023/05/17 15:23:12+00       Yes        No      Closed  \n",
            "82  GHATCHARD  2023/06/28 13:24:05+00       N/A       Yes         Yes  \n",
            "83  GHATCHARD  2023/06/28 13:15:52+00        No       Yes         Yes  \n",
            "84  GHATCHARD  2023/06/28 13:18:47+00        No       Yes         Yes  \n",
            "\n",
            "[85 rows x 38 columns]\n"
          ]
        }
      ]
    }
  ]
}
